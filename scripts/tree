#!/bin/sh -e

get_files() {
	local path=$1

	local cmd="find \"$path\" -mindepth 1 -maxdepth 1 ! -name '.' ! -name '..'"

	if [ $flag_gitignore -eq 1 ] && [ -f "$path/.gitignore" ]; then
		escape() {
      echo "$1" | sed 's/[][*?]/\\&/g' | sed 's/^\///g' | sed 's#/$##'
    }

		while IFS= read -r line || [ -n "$line" ]; do
			case "$line" in
				""|\#*) continue ;;
        !*) cmd="$cmd ! -path \"$(escape "${line#!}")\"" ;;
        *)  cmd="$cmd ! -name \"$(escape "$line")\"" ;;
			esac
		done < "$path"/.gitignore
	fi

	eval "$cmd"
}

print_file() {
	local path="$1"

	if [ -x "$path" ]; then echo -en "\033[1;32m"; fi
	echo -e "$(basename "$path")\033[m"
}

print_dir() {
	local path="$1"
	local indent="$2"
	local files=""

	[ ! -e "$path" ] && {
		echo "tree: unknown directory '$path'" >&2
		return
	}

	echo -e "\033[1;31m$(basename "$path")\033[m"

	items=$(get_files "$path")
	IFS='
'

	local count=0 pos=1
	for item in $items; do
		[ "$flag_a" -eq 0 ] && case "$item" in
			"$path"/.*) continue ;;
		esac

		count=$((count + 1))
	done

	handle_file() {
		if [ $flag_dirsfirst -eq 1 ]; then
			files="$files
$item"
		else
			printf '%s%s' "$indent" "$marker"
			print_file "$item"

			pos=$((pos + 1))
		fi
	}

	for item in $items; do
		[ $flag_a -eq 0 ] && case "$item" in
			"$path"/.*) continue ;;
		esac

		local last=$([ $pos -eq $count ] && echo 1 || echo 0)
		local marker=$([ $last -eq 1 ] && echo "╰─ " || echo "├─ ")

		if [ -d "$item" ]; then
			local new_indent="$indent$([ $last -eq 1 ] && echo "   " || echo "│  ")"

			printf '%s%s' "$indent" "$marker"
			print_dir "$item" "$new_indent"

			pos=$((pos + 1))
		else
			handle_file "$item"
		fi
	done

	if [ $flag_dirsfirst -eq 1 ]; then
		for item in $files; do
			local last=$([ $pos -eq $count ] && echo 1 || echo 0)
			local marker=$([ $last -eq 1 ] && echo "╰─ " || echo "├─ ")

			printf '%s%s' "$indent" "$marker"
			print_file "$item"

			pos=$((pos + 1))
		done
	fi
}

# args
flag_dirsfirst=0
flag_a=0
flag_gitignore=0

# if only flags were given we want to tree the current directory
# otherwise not, so we must make sure we printed something or not.
printed=0

for arg in $*; do
	case "$arg" in
		'-dirsfirst') flag_dirsfirst=1 ;;
		'-a') flag_a=1 ;;
		'-gitignore') flag_gitignore=1 ;;
		*)
			printed=1
			print_dir "$arg" ''
			;;
	esac
done

if [ $printed -eq 0 ]; then
	print_dir '.' ''
fi
